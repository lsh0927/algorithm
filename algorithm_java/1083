import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class 1083{

    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int N= Integer.parseInt(br.readLine());
        StringTokenizer st=new StringTokenizer(br.readLine());

        int[] arr= new int[N];
        for (int i=0;i<N;i++){
            arr[i]=Integer.parseInt(st.nextToken());
        }

        int S= Integer.parseInt(br.readLine());

        if (N*(N+1)/2<S){
            Arrays.sort(arr);
            StringBuilder sb= new StringBuilder();
            for (int i=N-1;i>=0;i--){
                sb.append(arr[i]).append(' ');
            }
            System.out.println(sb);
            return;
        }

        for (int k=0;k<N && S>0; k++){
            int max= arr[k]; //비교할 값(교환 가능한 거리를 따짐)
            int idx=-1; //바뀐 최대값

            for (int i=k+1; i<N && i<=k+S; i++){
                if (arr[i]>max){
                    max=arr[i];
                    idx=i;
                }
            }


            if (idx==-1) continue; // 바꿀 필요가 없음. 원래 값이 최대임

            S-=idx-k; //교환해야 하는 경우 그 거리를 S에서 빼줌

            // 실제 원소 교환. 인접한 두 원소의 교환이 연이어 이루어져야함
            for (int i=idx;i>=k+1;i--){
                int tmp= arr[i];
                arr[i]=arr[i-1];
                arr[i-1]=tmp;
            }


        }
        StringBuilder sb= new StringBuilder();

        for (int i=0;i<N;i++){
            sb.append(arr[i]).append(' ');
        }
        System.out.println(sb);

    }
}

