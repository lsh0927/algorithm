import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {

    static boolean[] isPrime;
    static ArrayList<Integer> prime_numbers = new ArrayList<>();

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(br.readLine());
        isPrime_fun(n);

        //소수 배열에 투  포인터로 경우의 수 ㄱㄱ

        int start = 0;
        int end = 0;
        int count = 0;
        int sum = 0;

        for(int i=1; i<=n;i++){
            if(isPrime[i]) prime_numbers.add(i);
        }

        for (int i = 1; i <= n; i++) {

            while (true) {
                    if (sum>=n) sum-= prime_numbers.get(start++);
                    else if(end == prime_numbers.size()) break;
                    else sum += prime_numbers.get(end++);
                    if(n==sum) count++;
            }
        }
        System.out.println(count);

    }

    static void isPrime_fun(int n){
        isPrime = new boolean[n+1];

        for(int i = 0; i < isPrime.length; i++){
            isPrime[i] = true;
        }

        isPrime[0] = isPrime[1] = false; // 0과 1은 소수가 아니니깐 false

        for(int i = 2; i <= Math.sqrt(n); i++){
            if(isPrime[i]){
                for(int j = i*i; j<= n; j += i){
                    isPrime[j] = false;
                }
            }
        }

    }


}
