import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

    static int N,M;
    static int[][] arr;
    static Integer[][] dp;
    static int[] rangeX= {1,0,-1,0};
    static int[] rangeY= {0,1,0,-1};

    public static void main(String[] args) throws IOException {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N=Integer.parseInt(st.nextToken());
        M=Integer.parseInt(st.nextToken());

        arr= new int[N][M];

        for (int i=0;i<N;i++){
            st= new StringTokenizer(br.readLine());
            for (int j=0;j<M;j++){
                arr[i][j]=Integer.parseInt(st.nextToken());
            }
        }

        dp= new Integer[N][M];

        System.out.println(dfs(0,0));

    }
    static int dfs(int x, int y){
        if (x==N-1 && y==M-1)
            return 1;
        // 이미 방문한 곳이면 그 값 반환 (메모이제이션)
        if (dp[x][y] != null) {
            return dp[x][y];
        }

        dp[x][y] = 0; // 현재 위치에서 끝점까지 도달하는 경로의 개수를 0으로 초기화.

        for (int i = 0; i < 4; i++) {
            int dx = x + rangeX[i];
            int dy = y + rangeY[i];

            if (dx < 0 || dy < 0 || dx >= N || dy >= M) {
                continue;
            }
            // arr[x][y]보다 arr[dx][dy]가 높이가 더 낮다면
            // arr[dx][dy]에서 끝점까지 도달하는 경로의 개수를 더한다.
            if (arr[x][y] > arr[dx][dy]) {
                dp[x][y] += dfs(dx, dy);
            }
        }
        return dp[x][y];
    }
}
