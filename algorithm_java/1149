import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Map;
import java.util.StringTokenizer;

import javax.sound.midi.MidiFileFormat;

public class Main {
    static int[][] arr;
    static int[][] dp;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int N= Integer.parseInt(st.nextToken());

        arr= new int[N][3];
        dp= new int[N][3];

        for (int i=0;i<N;i++){
            st= new StringTokenizer(br.readLine());
            for (int j=0;j<3;j++){
                arr[i][j]= Integer.parseInt(st.nextToken());
            }
        }

        dp[0][0]=arr[0][0];
        dp[0][1]=arr[0][1];
        dp[0][2]=arr[0][2];

        System.out.println(Math.min(recur(N-1,0), Math.min(recur(N-1,1), recur(N-1,2))));


    }
    static int recur(int N, int color){
        if (dp[N][color]==0){

            //여기서 color의 종류에 따라 좀 달라
            if (color==0){
                dp[N][color]= Math.min(recur(N-1,1),recur(N-1,2))+arr[N][0];
            }
            else if (color==1){
                dp[N][color]= Math.min(recur(N-1,0),recur(N-1,2))+arr[N][1];
            }
            else if (color==2){
                dp[N][color]= Math.min(recur(N-1,1),recur(N-1,0))+arr[N][2];
            }
        }

        return dp[N][color];
    }
}