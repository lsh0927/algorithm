import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.StringTokenizer;

public class 19598 {

    static PriorityQueue<Time> pq;

    static class Time implements Comparable<Time>{
        int time;
        boolean isStart;

        public Time(int time, boolean isStart) {
            this.time = time;
            this.isStart = isStart;
        }

        @Override
        public int compareTo(Time o) {
            return this.time - o.time;
        }
    }
    public static void main(String[] args) throws Exception {

        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        //N개의 회의를 모두 진행할 수 있는 최소 회의실 개수를 구함
        //각회의는 시작 시간, 끝나는 기간이 주어짐
        //동시에 두개이상의 회의 x
        // 회의 시작 시간은 끝나는 시간보다 항상 작음

        int N= Integer.parseInt(br.readLine());
        pq= new PriorityQueue<>();


        StringTokenizer st;
        for(int i=0;i<N;i++){
            st= new StreamTokenizer(br.readLine());
            for(int j=0;j<2;j++){
                int s=Integer.parseInt(st.nextToken());
                int e=Integer.parseInt(st.nextToken());
                pq.add(new int[]{s,e});

            }
        }
        int cnt = 0; // 회의실 개수
        int answer = 0; // 최대값

        while (!pq.isEmpty()) {
            Time t = pq.poll();

            if (t.isStart) {
                cnt++;
                answer = Math.max(cnt, answer);
            }
            else {
                cnt--;
            }
        }

        System.out.println(answer);
    }
}
