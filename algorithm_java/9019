
import java.util.*;  
import java.io.*;  
  
public class Main{  
  
    static class Node{  
        int cur;  
        String sqc;  
  
        public Node(int cur, String sqc) {  
            this.cur = cur;  
            this.sqc = sqc;  
        }  
    }  
  
  
  
    static int start,end;  
    static int ans;  
    public static void main(String[] args) throws IOException {  
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  
  
  
        int t= Integer.parseInt(br.readLine());  
  
        for (int tc=0;tc<t;tc++){  
            StringTokenizer st= new StringTokenizer(br.readLine());  
  
            start= Integer.parseInt(st.nextToken());  
            end= Integer.parseInt(st.nextToken());  
  
            bfs(start);  
        }  
  
  
  
    }  
    static void bfs(int start){  
        Queue<Node> queue= new LinkedList<>();  
  
        queue.add(new Node(start,""));  
  
        while (!queue.isEmpty()){  
  
            Node node = queue.poll();  
  
            if (start==end){  
              //  System.out.println(node.sqc);  
                return;  
            }  
  
            // 1. 2*start % 10000  
  
            queue.add(new Node((start*2)%10000, node.sqc+"D"));  
  
            // 2. start-1  
            if (start==0)  
                queue.add(new Node(9999, node.sqc+"S"));  
            else                queue.add(new Node(start-1, node.sqc+"S"));  
  
  
            // 3.왼쪽으로 1칸씩 이동 후 저장  
  
  
            char[] leftArr =String.valueOf(node.cur).toCharArray();  
            char[] rightArr= leftArr.clone();  
  
  
  
            char lFirst=leftArr[0];  
            //변환  
            for (int i=0;i<leftArr.length-1;i++){  
                if (i>0){  
                    leftArr[i]=leftArr[i+1];  
                }  
            }  
            leftArr[leftArr.length-1]=lFirst;  
  
            String left= leftArr.toString();  
            System.out.println(left);  
            queue.add(new Node(Integer.parseInt(left), node.sqc+"L"));  
  
  
            // 4. 오른쪽으로 1칸씩 이동 후 저장  
  
            char rLast=rightArr[rightArr.length-1];  
            //변환  
            for (int i=rightArr.length-1;i>0;i--){  
                if (i<rightArr.length-1){  
                    rightArr[i]=rightArr[i-1];  
                }  
            }  
            rightArr[0]=rLast;  
            String right= rightArr.toString();  
  
  
            queue.add(new Node(Integer.parseInt(right), node.sqc+"R"));  
  
  
  
        }  
    }  
}
