import java.io.*;
import java.util.*;


public class Main {
	
	static class Node {
	
		int x;
		int y;

		public Node(int x,int y){
			this.x=x;
			this.y=y;
		}
	}


 	static int N, M;
	static int emptySpace=0;
	static int answer = Integer.MAX_VALUE;
    static int[][] map;

    static List<Node> list = new ArrayList<>();
    static Node[] active;

    static int[] dx = {1, 0, -1, 0};
    static int[] dy = {0, 1, 0, -1};

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		
		N=Integer.parseInt(st.nextToken());
		M=Integer.parseInt(st.nextToken());

		map=new int[N][N];

		active=new Node[M];

		for(int i=0;i<N;i++){
			st=new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++){
				map[i][j]= Integer.parseInt(st.nextToken());
				if (map[i][j]==0) {
					emptySpace++;
				}else if (map[i][j] == 2) {
                    list.add(new Node(i, j));
                }
			}
		}

		if (emptySpace==0) {
			System.out.println(0);
			return;
		}

		combination(0,0);

		if (answer==Integer.MAX_VALUE) {
			System.out.println(-1);
		}
		else
			System.out.println(answer);
	}
	public static void combination(int depth,int start){
		if (depth==M) {
			spread(emptySpace);
			return;
		}

		 for(int i=start;i<list.size();i++){
			active[depth]=list.get(i);
			combination(depth+1, i+1);
		 }
			
		
	}

	public static void spread(int emptySpace){
		Queue<Node> queue= new LinkedList<>();
		boolean[][] visit= new boolean[N][N];

		for (Node cur : active) {
			queue.add(cur);
			visit[cur.x][cur.y]=true;

		}

		int time=0;

		while (!queue.isEmpty()) {
			int size= queue.size();

			for(int i=0;i<size;i++){
                
				Node cur= queue.poll();

				for(int k=0;k<4;k++){
					int nx=cur.x+dx[k];
					int ny=cur.y+dy[k];

					if (nx>=0 && nx<N && ny<N&& ny>=0 && !visit[nx][ny] && map[nx][ny]==0) {
						emptySpace--;
						visit[nx][ny]=true;
						queue.add(new Node(nx, ny));
					}
					else if (nx>=0 && nx<N && ny<N&& ny>=0 && !visit[nx][ny] && map[nx][ny]==2) {
						visit[nx][ny]=true;
						queue.add(new Node(nx, ny));
					}

                    
					
				}

			}
			//한번 큐에 있는 모든 바이러스의 확산이 완료되면 시간 + 1
			time++;

			if (time>=answer) {
				return;
			}
			if (emptySpace<=0) {
				answer=time;
			}
		}
	}
}