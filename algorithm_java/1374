import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main{
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());

        List<Time> list= new ArrayList<>();

        StringTokenizer st;


        for (int i=0;i<n;i++){
            st= new StringTokenizer(br.readLine());
            int a=Integer.parseInt(st.nextToken());
            int b=Integer.parseInt(st.nextToken());
            int c=Integer.parseInt(st.nextToken());

            list.add(new Time(a,b,c));
        }
        Collections.sort(list);

        for (Time time : list) {
            System.out.println(time.n+" "+ time.s+" "+ time.e);

        }


        //강의 정보를 리스트에 담았음

        PriorityQueue<Integer> q= new PriorityQueue<>();
        int max=1;
        for (int i=0;i<n;i++){
            while(!q.isEmpty() && q.peek()<=list.get(i).s){
                q.poll();
            }
            q.offer(list.get(i).e);
            max=Math.max(max,q.size());
        }

        System.out.println(max);

    }

    public static class Time implements Comparable<Time>{
        int n,s,e;

        public Time(int n, int s, int e) {
            this.n = n;
            this.s = s;
            this.e = e;
        }

        @Override
        public int compareTo(Time o){
            if (this.s==o.s){
                return this.e-o.e;
            }
            return this.s-o.s;
        }
        //시작시간 빠른 순 정렬 -> 끝나는 시간 빠른 순 정렬
        //primitive 타입이 아닌, 새로운 클래스를 비교?
        // 객체를 비교할 수 있도록

        //Comparator: 두 매개변수 객체 비교
        //Comparable: 자기 자신과 매개변수 객체를 비교

        //이 Comparable은 비교가 가능하도록 만들어줄뿐, 실제 비교는 line24에서 처럼 해줘야 함
        // 또한 자료형의 범위에 주의

        // https://st-lab.tistory.com/243
    } 
}

