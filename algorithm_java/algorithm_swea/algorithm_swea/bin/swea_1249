
// import java.io.BufferedReader;
// import java.io.InputStreamReader;
// import java.util.StringTokenizer;


// public class Solution {     

//     static int N;
//     static int Min;
//     static int sum;
//     static int[] dx= {1,0,-1,0};
//     static int[] dy= {0,1,0,-1};

//     static int[][] arr;
//     static boolean[][] visited;
//     public static void main(String[] args) throws Exception {
        
//         BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
//         int T= Integer.parseInt(br.readLine());

//         for(int t=1;t<=T;t++){
//             sum=0;
//             N= Integer.parseInt(br.readLine());
//             Min=Integer.MAX_VALUE;

//             arr= new int[N][N];
//             visited= new boolean[N][N];

//             for(int i=0;i<N;i++){
//                 String s= br.readLine();
//                 for(int j=0;j<N;j++){
//                     arr[i][j]= s.charAt(j)-'0';
//                 }

//             }

//             //또 최솟값?
//             visited[0][0]=true;
//             dfs(0,0,sum);


//             System.out.println("#" + t + " " + Min);
//         }
     
//     }   
//     public static void dfs(int x, int y, int totalSum){

//         if (totalSum>=Min) {
//             return;
//         }

//         if (x==N-1 && y==N-1) {
//             Min=Math.min(totalSum+arr[N-1][N-1], Min);
//             return;
//         }

//        for(int i=0;i<4;i++){
//            int nx= dx[i]+x;
//            int ny= dy[i]+y;


//            if (nx>=0 && nx<N && ny>=0 && ny<N && !visited[nx][ny]) {

//               visited[nx][ny]=true;
//               dfs(nx, ny, totalSum+arr[nx][ny]);
//               visited[nx][ny]=false;
//            }
//        }

//     }

// }



// s 0 0 0 0
// 1 1 1 1 0
// 0 0 0 0 0
// 0 1 1 1 4
// 0 1 0 1 F





import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;


public class Solution {     

    static int N;
 
    static int[] dx= {1,0,-1,0};
    static int[] dy= {0,1,0,-1};

    static int[][] arr;
    public static void main(String[] args) throws Exception {
        
        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
        int T= Integer.parseInt(br.readLine());

        for(int t=1;t<=T;t++){
            N= Integer.parseInt(br.readLine());

            arr= new int[N][N];

            for(int i=0;i<N;i++){
                String s= br.readLine();
                for(int j=0;j<N;j++){
                    arr[i][j]= s.charAt(j)-'0';
                }

            }

           
            int ans=fun();


            System.out.println("#" + t + " " + ans);
        }
     
    }   
    public static int fun(){

        int[][] dp= new int[N][N];
        for(int i=0;i<N;i++){
            Arrays.fill(dp[i], Integer.MAX_VALUE);
        }
        dp[0][0]=0;
            
        Queue<int[]> queue= new LinkedList<>();
        queue.add(new int[]{0,0});

        while (!queue.isEmpty()) {
            int[] list= queue.poll();

            for(int i=0;i<4;i++){

                int nx= dx[i]+list[0];
                int ny= dy[i]+list[1];
                if (nx>=0 && nx<N && ny>=0 && ny<N && dp[list[0]][list[1]]+ arr[nx][ny] <dp[nx][ny]) {
                    dp[nx][ny]=dp[list[0]][list[1]]+arr[nx][ny];
                    queue.add(new int[]{nx,ny});
                }
            }
        }

        return dp[N-1][N-1];

    }

}

/*
 * 1859
 * 1954
 * 1926
 * 2001
 * 1974
 * 2007
 * 2005
 * 1225
 * 1284
 * 1979
 */