import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Map;
import java.util.StringTokenizer;

public class Main {
    static int[] rangeX = { -1, 0, 1, 0 };
    static int[] rangeY = { 0, 1, 0, -1 };
    static int N;
    static int[][] map; // 대나무 숲
    static int[][] dp;

    public static void main(String[] args) throws NumberFormatException, IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        N = Integer.parseInt(br.readLine());

        map = new int[N][N];
        dp = new int[N][N];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            for (int j = 0; j < N; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        int ans=0;
        for (int i=0;i<N;i++){
            for (int j=0;j<N;j++){
                ans= Math.max(ans,DFS(i,j));
            }
        }

        System.out.println(ans);

    }

    static int DFS(int x ,int y){
        if (dp[x][y]!=0)
            return dp[x][y];

        dp[x][y]=1;

        for (int i=0;i<4;i++){
            int dx= x+rangeX[i];
            int dy= y+rangeY[i];

            if (0 > dx || N <= dx || dy < 0 || dy >=N)
                continue;

            if (map[x][y]< map[dx][dy]) {
                dp[x][y] = Math.max(dp[x][y], DFS(dx,dy)+1);
            }
        }
        return dp[x][y];
    }
}
