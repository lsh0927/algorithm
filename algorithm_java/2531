import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Scanner;
import java.util.StringTokenizer;

public class Solution {


    public static void main(String[] args) throws Exception{
        BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st= new StringTokenizer(br.readLine());

        int N= Integer.parseInt(st.nextToken());
        int d=Integer.parseInt(st.nextToken());
        int k=Integer.parseInt(st.nextToken());
        int c=Integer.parseInt(st.nextToken());

        int[] sushi= new int[N];
        int[] eated= new int[d+1];  // 먹은 초밥의 종류(번호) 별 갯수

        int count = 0;

        for(int i=0;i<N;i++){
            sushi[i]=Integer.parseInt(br.readLine());
        }

        // 시작 전 먹을 초밥의 가짓수를 구하기
        for(int i=0;i<k;i++){
            int sushiId=sushi[i];
            if(eated[sushiId]==0){
                count++;
            }
            eated[sushiId]++;
        }

        int max= count;

        // 2) 1번부터 n-1번까지 Start만 이동시키면 k는 고정이기 때문에 end를
        // 활용할 필요가 없음
        //i= start
        for(int i=1;i<N;i++){
            if(max<=count){
                if(eated[c]==0){ //아직 쿠폰 초밥을 안먹은 상태
                    max= count+1;
                }
                else{
                    max=count;
                }
            }

            //end 이동
            int end= (i+k-1)%n;
            if(eated[sushi[end]]==0){
                count++;
            }
            eated[sushi[end]]++;

            //start 이동
            eated[sushi[i-1]]--; //start 지점이 한칸 이동했으니, 이전의 초밥 제거
            if(eated[sushi[i-1]]==0){
                count--;
            }
        }

        
        System.out.println(max);
        }
}

   

//이게 이렇게 복잡하게 접근해야 할 문제인가??? 실버 1인데?? 다른 방번 없나,,,,
